// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/03/2018 13:56:01"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    one_instruction
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module one_instruction_vlg_sample_tst(
	clk,
	in_controller,
	in_reg_A,
	in_reg_B,
	in_sign_temp_load,
	in_sign_temp_mem,
	in_temp_load,
	in_temp_mem,
	rst,
	sign_ir,
	sampler_tx
);
input  clk;
input [2:0] in_controller;
input [3:0] in_reg_A;
input [3:0] in_reg_B;
input  in_sign_temp_load;
input  in_sign_temp_mem;
input [3:0] in_temp_load;
input [3:0] in_temp_mem;
input  rst;
input  sign_ir;
output sampler_tx;

reg sample;
time current_time;
always @(clk or in_controller or in_reg_A or in_reg_B or in_sign_temp_load or in_sign_temp_mem or in_temp_load or in_temp_mem or rst or sign_ir)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module one_instruction_vlg_check_tst (
	o_reg_A,
	o_reg_B,
	o_sign,
	sampler_rx
);
input [3:0] o_reg_A;
input [3:0] o_reg_B;
input  o_sign;
input sampler_rx;

reg [3:0] o_reg_A_expected;
reg [3:0] o_reg_B_expected;
reg  o_sign_expected;

reg [3:0] o_reg_A_prev;
reg [3:0] o_reg_B_prev;
reg  o_sign_prev;

reg [3:0] o_reg_A_expected_prev;
reg [3:0] o_reg_B_expected_prev;
reg  o_sign_expected_prev;

reg [3:0] last_o_reg_A_exp;
reg [3:0] last_o_reg_B_exp;
reg  last_o_sign_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	o_reg_A_prev = o_reg_A;
	o_reg_B_prev = o_reg_B;
	o_sign_prev = o_sign;
end

// update expected /o prevs

always @(trigger)
begin
	o_reg_A_expected_prev = o_reg_A_expected;
	o_reg_B_expected_prev = o_reg_B_expected;
	o_sign_expected_prev = o_sign_expected;
end


// expected o_reg_A[ 3 ]
initial
begin
	o_reg_A_expected[3] = 1'bX;
end 
// expected o_reg_A[ 2 ]
initial
begin
	o_reg_A_expected[2] = 1'bX;
end 
// expected o_reg_A[ 1 ]
initial
begin
	o_reg_A_expected[1] = 1'bX;
end 
// expected o_reg_A[ 0 ]
initial
begin
	o_reg_A_expected[0] = 1'bX;
end 
// expected o_reg_B[ 3 ]
initial
begin
	o_reg_B_expected[3] = 1'bX;
end 
// expected o_reg_B[ 2 ]
initial
begin
	o_reg_B_expected[2] = 1'bX;
end 
// expected o_reg_B[ 1 ]
initial
begin
	o_reg_B_expected[1] = 1'bX;
end 
// expected o_reg_B[ 0 ]
initial
begin
	o_reg_B_expected[0] = 1'bX;
end 

// expected o_sign
initial
begin
	o_sign_expected = 1'bX;
end 
// generate trigger
always @(o_reg_A_expected or o_reg_A or o_reg_B_expected or o_reg_B or o_sign_expected or o_sign)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected o_reg_A = %b | expected o_reg_B = %b | expected o_sign = %b | ",o_reg_A_expected_prev,o_reg_B_expected_prev,o_sign_expected_prev);
	$display("| real o_reg_A = %b | real o_reg_B = %b | real o_sign = %b | ",o_reg_A_prev,o_reg_B_prev,o_sign_prev);
`endif
	if (
		( o_reg_A_expected_prev[0] !== 1'bx ) && ( o_reg_A_prev[0] !== o_reg_A_expected_prev[0] )
		&& ((o_reg_A_expected_prev[0] !== last_o_reg_A_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_reg_A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_reg_A_expected_prev);
		$display ("     Real value = %b", o_reg_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_reg_A_exp[0] = o_reg_A_expected_prev[0];
	end
	if (
		( o_reg_A_expected_prev[1] !== 1'bx ) && ( o_reg_A_prev[1] !== o_reg_A_expected_prev[1] )
		&& ((o_reg_A_expected_prev[1] !== last_o_reg_A_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_reg_A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_reg_A_expected_prev);
		$display ("     Real value = %b", o_reg_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_reg_A_exp[1] = o_reg_A_expected_prev[1];
	end
	if (
		( o_reg_A_expected_prev[2] !== 1'bx ) && ( o_reg_A_prev[2] !== o_reg_A_expected_prev[2] )
		&& ((o_reg_A_expected_prev[2] !== last_o_reg_A_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_reg_A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_reg_A_expected_prev);
		$display ("     Real value = %b", o_reg_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_reg_A_exp[2] = o_reg_A_expected_prev[2];
	end
	if (
		( o_reg_A_expected_prev[3] !== 1'bx ) && ( o_reg_A_prev[3] !== o_reg_A_expected_prev[3] )
		&& ((o_reg_A_expected_prev[3] !== last_o_reg_A_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_reg_A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_reg_A_expected_prev);
		$display ("     Real value = %b", o_reg_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_reg_A_exp[3] = o_reg_A_expected_prev[3];
	end
	if (
		( o_reg_B_expected_prev[0] !== 1'bx ) && ( o_reg_B_prev[0] !== o_reg_B_expected_prev[0] )
		&& ((o_reg_B_expected_prev[0] !== last_o_reg_B_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_reg_B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_reg_B_expected_prev);
		$display ("     Real value = %b", o_reg_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_reg_B_exp[0] = o_reg_B_expected_prev[0];
	end
	if (
		( o_reg_B_expected_prev[1] !== 1'bx ) && ( o_reg_B_prev[1] !== o_reg_B_expected_prev[1] )
		&& ((o_reg_B_expected_prev[1] !== last_o_reg_B_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_reg_B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_reg_B_expected_prev);
		$display ("     Real value = %b", o_reg_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_reg_B_exp[1] = o_reg_B_expected_prev[1];
	end
	if (
		( o_reg_B_expected_prev[2] !== 1'bx ) && ( o_reg_B_prev[2] !== o_reg_B_expected_prev[2] )
		&& ((o_reg_B_expected_prev[2] !== last_o_reg_B_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_reg_B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_reg_B_expected_prev);
		$display ("     Real value = %b", o_reg_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_reg_B_exp[2] = o_reg_B_expected_prev[2];
	end
	if (
		( o_reg_B_expected_prev[3] !== 1'bx ) && ( o_reg_B_prev[3] !== o_reg_B_expected_prev[3] )
		&& ((o_reg_B_expected_prev[3] !== last_o_reg_B_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_reg_B[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_reg_B_expected_prev);
		$display ("     Real value = %b", o_reg_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_reg_B_exp[3] = o_reg_B_expected_prev[3];
	end
	if (
		( o_sign_expected_prev !== 1'bx ) && ( o_sign_prev !== o_sign_expected_prev )
		&& ((o_sign_expected_prev !== last_o_sign_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_sign :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_sign_expected_prev);
		$display ("     Real value = %b", o_sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_o_sign_exp = o_sign_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module one_instruction_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [2:0] in_controller;
reg [3:0] in_reg_A;
reg [3:0] in_reg_B;
reg in_sign_temp_load;
reg in_sign_temp_mem;
reg [3:0] in_temp_load;
reg [3:0] in_temp_mem;
reg rst;
reg sign_ir;
// wires                                               
wire [3:0] o_reg_A;
wire [3:0] o_reg_B;
wire o_sign;

wire sampler;                             

// assign statements (if any)                          
one_instruction i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.in_controller(in_controller),
	.in_reg_A(in_reg_A),
	.in_reg_B(in_reg_B),
	.in_sign_temp_load(in_sign_temp_load),
	.in_sign_temp_mem(in_sign_temp_mem),
	.in_temp_load(in_temp_load),
	.in_temp_mem(in_temp_mem),
	.o_reg_A(o_reg_A),
	.o_reg_B(o_reg_B),
	.o_sign(o_sign),
	.rst(rst),
	.sign_ir(sign_ir)
);

// rst
initial
begin
	rst = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// in_controller[ 2 ]
initial
begin
	in_controller[2] = 1'b0;
end 
// in_controller[ 1 ]
initial
begin
	in_controller[1] = 1'b0;
	in_controller[1] = #10000 1'b1;
	in_controller[1] = #10000 1'b0;
end 
// in_controller[ 0 ]
initial
begin
	in_controller[0] = 1'b0;
	in_controller[0] = #140000 1'b1;
	in_controller[0] = #10000 1'b0;
	in_controller[0] = #130000 1'b1;
	in_controller[0] = #10000 1'b0;
end 

// sign_ir
initial
begin
	sign_ir = 1'b0;
	sign_ir = #60000 1'b1;
	sign_ir = #10000 1'b0;
	sign_ir = #120000 1'b1;
	sign_ir = #10000 1'b0;
	sign_ir = #120000 1'b1;
	sign_ir = #10000 1'b0;
end 
// in_reg_A[ 3 ]
initial
begin
	in_reg_A[3] = 1'b0;
end 
// in_reg_A[ 2 ]
initial
begin
	in_reg_A[2] = 1'b0;
	in_reg_A[2] = #60000 1'b1;
	in_reg_A[2] = #10000 1'b0;
end 
// in_reg_A[ 1 ]
initial
begin
	in_reg_A[1] = 1'b0;
end 
// in_reg_A[ 0 ]
initial
begin
	in_reg_A[0] = 1'b0;
	in_reg_A[0] = #60000 1'b1;
	in_reg_A[0] = #10000 1'b0;
	in_reg_A[0] = #120000 1'b1;
	in_reg_A[0] = #10000 1'b0;
	in_reg_A[0] = #120000 1'b1;
	in_reg_A[0] = #10000 1'b0;
end 
// in_reg_B[ 3 ]
initial
begin
	in_reg_B[3] = 1'b0;
end 
// in_reg_B[ 2 ]
initial
begin
	in_reg_B[2] = 1'b0;
	in_reg_B[2] = #190000 1'b1;
	in_reg_B[2] = #10000 1'b0;
end 
// in_reg_B[ 1 ]
initial
begin
	in_reg_B[1] = 1'b0;
	in_reg_B[1] = #60000 1'b1;
	in_reg_B[1] = #10000 1'b0;
	in_reg_B[1] = #120000 1'b1;
	in_reg_B[1] = #10000 1'b0;
end 
// in_reg_B[ 0 ]
initial
begin
	in_reg_B[0] = 1'b0;
	in_reg_B[0] = #60000 1'b1;
	in_reg_B[0] = #10000 1'b0;
	in_reg_B[0] = #120000 1'b1;
	in_reg_B[0] = #10000 1'b0;
end 

// in_sign_temp_mem
initial
begin
	in_sign_temp_mem = 1'b0;
	in_sign_temp_mem = #90000 1'b1;
	in_sign_temp_mem = #10000 1'b0;
end 
// in_temp_mem[ 3 ]
initial
begin
	in_temp_mem[3] = 1'b0;
end 
// in_temp_mem[ 2 ]
initial
begin
	in_temp_mem[2] = 1'b0;
	in_temp_mem[2] = #90000 1'b1;
	in_temp_mem[2] = #10000 1'b0;
end 
// in_temp_mem[ 1 ]
initial
begin
	in_temp_mem[1] = 1'b0;
	in_temp_mem[1] = #90000 1'b1;
	in_temp_mem[1] = #10000 1'b0;
end 
// in_temp_mem[ 0 ]
initial
begin
	in_temp_mem[0] = 1'b0;
end 

// in_sign_temp_load
initial
begin
	in_sign_temp_load = 1'b0;
	in_sign_temp_load = #250000 1'b1;
	in_sign_temp_load = #10000 1'b0;
end 
// in_temp_load[ 3 ]
initial
begin
	in_temp_load[3] = 1'b0;
	in_temp_load[3] = #250000 1'b1;
	in_temp_load[3] = #10000 1'b0;
end 
// in_temp_load[ 2 ]
initial
begin
	in_temp_load[2] = 1'b0;
	in_temp_load[2] = #250000 1'b1;
	in_temp_load[2] = #10000 1'b0;
end 
// in_temp_load[ 1 ]
initial
begin
	in_temp_load[1] = 1'b0;
end 
// in_temp_load[ 0 ]
initial
begin
	in_temp_load[0] = 1'b0;
end 

one_instruction_vlg_sample_tst tb_sample (
	.clk(clk),
	.in_controller(in_controller),
	.in_reg_A(in_reg_A),
	.in_reg_B(in_reg_B),
	.in_sign_temp_load(in_sign_temp_load),
	.in_sign_temp_mem(in_sign_temp_mem),
	.in_temp_load(in_temp_load),
	.in_temp_mem(in_temp_mem),
	.rst(rst),
	.sign_ir(sign_ir),
	.sampler_tx(sampler)
);

one_instruction_vlg_check_tst tb_out(
	.o_reg_A(o_reg_A),
	.o_reg_B(o_reg_B),
	.o_sign(o_sign),
	.sampler_rx(sampler)
);
endmodule

