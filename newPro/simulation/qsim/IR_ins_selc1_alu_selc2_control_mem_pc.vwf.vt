// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/03/2018 14:31:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    IR_ins_selc1_alu_selc2_control_mem_pc
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module IR_ins_selc1_alu_selc2_control_mem_pc_vlg_sample_tst(
	clk,
	rst,
	start_but,
	sampler_tx
);
input  clk;
input  rst;
input  start_but;
output sampler_tx;

reg sample;
time current_time;
always @(clk or rst or start_but)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module IR_ins_selc1_alu_selc2_control_mem_pc_vlg_check_tst (
	data_out,
	t_data_outA,
	t_data_outB,
	t_opCode,
	t_pc,
	t_sig_pc,
	test_out_ins,
	sampler_rx
);
input [3:0] data_out;
input [3:0] t_data_outA;
input [3:0] t_data_outB;
input [2:0] t_opCode;
input [3:0] t_pc;
input  t_sig_pc;
input [3:0] test_out_ins;
input sampler_rx;

reg [3:0] data_out_expected;
reg [3:0] t_data_outA_expected;
reg [3:0] t_data_outB_expected;
reg [2:0] t_opCode_expected;
reg [3:0] t_pc_expected;
reg  t_sig_pc_expected;
reg [3:0] test_out_ins_expected;

reg [3:0] data_out_prev;
reg [3:0] t_data_outA_prev;
reg [3:0] t_data_outB_prev;
reg [2:0] t_opCode_prev;
reg [3:0] t_pc_prev;
reg  t_sig_pc_prev;
reg [3:0] test_out_ins_prev;

reg [3:0] data_out_expected_prev;
reg [3:0] t_data_outA_expected_prev;
reg [3:0] t_data_outB_expected_prev;
reg [2:0] t_opCode_expected_prev;
reg [3:0] t_pc_expected_prev;
reg  t_sig_pc_expected_prev;
reg [3:0] test_out_ins_expected_prev;

reg [3:0] last_data_out_exp;
reg [3:0] last_t_data_outA_exp;
reg [3:0] last_t_data_outB_exp;
reg [2:0] last_t_opCode_exp;
reg [3:0] last_t_pc_exp;
reg  last_t_sig_pc_exp;
reg [3:0] last_test_out_ins_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	data_out_prev = data_out;
	t_data_outA_prev = t_data_outA;
	t_data_outB_prev = t_data_outB;
	t_opCode_prev = t_opCode;
	t_pc_prev = t_pc;
	t_sig_pc_prev = t_sig_pc;
	test_out_ins_prev = test_out_ins;
end

// update expected /o prevs

always @(trigger)
begin
	data_out_expected_prev = data_out_expected;
	t_data_outA_expected_prev = t_data_outA_expected;
	t_data_outB_expected_prev = t_data_outB_expected;
	t_opCode_expected_prev = t_opCode_expected;
	t_pc_expected_prev = t_pc_expected;
	t_sig_pc_expected_prev = t_sig_pc_expected;
	test_out_ins_expected_prev = test_out_ins_expected;
end


// expected data_out[ 3 ]
initial
begin
	data_out_expected[3] = 1'bX;
end 
// expected data_out[ 2 ]
initial
begin
	data_out_expected[2] = 1'bX;
end 
// expected data_out[ 1 ]
initial
begin
	data_out_expected[1] = 1'bX;
end 
// expected data_out[ 0 ]
initial
begin
	data_out_expected[0] = 1'bX;
end 
// expected t_pc[ 3 ]
initial
begin
	t_pc_expected[3] = 1'bX;
end 
// expected t_pc[ 2 ]
initial
begin
	t_pc_expected[2] = 1'bX;
end 
// expected t_pc[ 1 ]
initial
begin
	t_pc_expected[1] = 1'bX;
end 
// expected t_pc[ 0 ]
initial
begin
	t_pc_expected[0] = 1'bX;
end 

// expected t_sig_pc
initial
begin
	t_sig_pc_expected = 1'bX;
end 
// expected t_opCode[ 2 ]
initial
begin
	t_opCode_expected[2] = 1'bX;
end 
// expected t_opCode[ 1 ]
initial
begin
	t_opCode_expected[1] = 1'bX;
end 
// expected t_opCode[ 0 ]
initial
begin
	t_opCode_expected[0] = 1'bX;
end 
// expected t_data_outA[ 3 ]
initial
begin
	t_data_outA_expected[3] = 1'bX;
end 
// expected t_data_outA[ 2 ]
initial
begin
	t_data_outA_expected[2] = 1'bX;
end 
// expected t_data_outA[ 1 ]
initial
begin
	t_data_outA_expected[1] = 1'bX;
end 
// expected t_data_outA[ 0 ]
initial
begin
	t_data_outA_expected[0] = 1'bX;
end 
// expected t_data_outB[ 3 ]
initial
begin
	t_data_outB_expected[3] = 1'bX;
end 
// expected t_data_outB[ 2 ]
initial
begin
	t_data_outB_expected[2] = 1'bX;
end 
// expected t_data_outB[ 1 ]
initial
begin
	t_data_outB_expected[1] = 1'bX;
end 
// expected t_data_outB[ 0 ]
initial
begin
	t_data_outB_expected[0] = 1'bX;
end 
// expected test_out_ins[ 3 ]
initial
begin
	test_out_ins_expected[3] = 1'bX;
end 
// expected test_out_ins[ 2 ]
initial
begin
	test_out_ins_expected[2] = 1'bX;
end 
// expected test_out_ins[ 1 ]
initial
begin
	test_out_ins_expected[1] = 1'bX;
end 
// expected test_out_ins[ 0 ]
initial
begin
	test_out_ins_expected[0] = 1'bX;
end 
// generate trigger
always @(data_out_expected or data_out or t_data_outA_expected or t_data_outA or t_data_outB_expected or t_data_outB or t_opCode_expected or t_opCode or t_pc_expected or t_pc or t_sig_pc_expected or t_sig_pc or test_out_ins_expected or test_out_ins)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected data_out = %b | expected t_data_outA = %b | expected t_data_outB = %b | expected t_opCode = %b | expected t_pc = %b | expected t_sig_pc = %b | expected test_out_ins = %b | ",data_out_expected_prev,t_data_outA_expected_prev,t_data_outB_expected_prev,t_opCode_expected_prev,t_pc_expected_prev,t_sig_pc_expected_prev,test_out_ins_expected_prev);
	$display("| real data_out = %b | real t_data_outA = %b | real t_data_outB = %b | real t_opCode = %b | real t_pc = %b | real t_sig_pc = %b | real test_out_ins = %b | ",data_out_prev,t_data_outA_prev,t_data_outB_prev,t_opCode_prev,t_pc_prev,t_sig_pc_prev,test_out_ins_prev);
`endif
	if (
		( data_out_expected_prev[0] !== 1'bx ) && ( data_out_prev[0] !== data_out_expected_prev[0] )
		&& ((data_out_expected_prev[0] !== last_data_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[0] = data_out_expected_prev[0];
	end
	if (
		( data_out_expected_prev[1] !== 1'bx ) && ( data_out_prev[1] !== data_out_expected_prev[1] )
		&& ((data_out_expected_prev[1] !== last_data_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[1] = data_out_expected_prev[1];
	end
	if (
		( data_out_expected_prev[2] !== 1'bx ) && ( data_out_prev[2] !== data_out_expected_prev[2] )
		&& ((data_out_expected_prev[2] !== last_data_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[2] = data_out_expected_prev[2];
	end
	if (
		( data_out_expected_prev[3] !== 1'bx ) && ( data_out_prev[3] !== data_out_expected_prev[3] )
		&& ((data_out_expected_prev[3] !== last_data_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[3] = data_out_expected_prev[3];
	end
	if (
		( t_data_outA_expected_prev[0] !== 1'bx ) && ( t_data_outA_prev[0] !== t_data_outA_expected_prev[0] )
		&& ((t_data_outA_expected_prev[0] !== last_t_data_outA_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_data_outA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_data_outA_expected_prev);
		$display ("     Real value = %b", t_data_outA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_t_data_outA_exp[0] = t_data_outA_expected_prev[0];
	end
	if (
		( t_data_outA_expected_prev[1] !== 1'bx ) && ( t_data_outA_prev[1] !== t_data_outA_expected_prev[1] )
		&& ((t_data_outA_expected_prev[1] !== last_t_data_outA_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_data_outA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_data_outA_expected_prev);
		$display ("     Real value = %b", t_data_outA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_t_data_outA_exp[1] = t_data_outA_expected_prev[1];
	end
	if (
		( t_data_outA_expected_prev[2] !== 1'bx ) && ( t_data_outA_prev[2] !== t_data_outA_expected_prev[2] )
		&& ((t_data_outA_expected_prev[2] !== last_t_data_outA_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_data_outA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_data_outA_expected_prev);
		$display ("     Real value = %b", t_data_outA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_t_data_outA_exp[2] = t_data_outA_expected_prev[2];
	end
	if (
		( t_data_outA_expected_prev[3] !== 1'bx ) && ( t_data_outA_prev[3] !== t_data_outA_expected_prev[3] )
		&& ((t_data_outA_expected_prev[3] !== last_t_data_outA_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_data_outA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_data_outA_expected_prev);
		$display ("     Real value = %b", t_data_outA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_t_data_outA_exp[3] = t_data_outA_expected_prev[3];
	end
	if (
		( t_data_outB_expected_prev[0] !== 1'bx ) && ( t_data_outB_prev[0] !== t_data_outB_expected_prev[0] )
		&& ((t_data_outB_expected_prev[0] !== last_t_data_outB_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_data_outB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_data_outB_expected_prev);
		$display ("     Real value = %b", t_data_outB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_t_data_outB_exp[0] = t_data_outB_expected_prev[0];
	end
	if (
		( t_data_outB_expected_prev[1] !== 1'bx ) && ( t_data_outB_prev[1] !== t_data_outB_expected_prev[1] )
		&& ((t_data_outB_expected_prev[1] !== last_t_data_outB_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_data_outB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_data_outB_expected_prev);
		$display ("     Real value = %b", t_data_outB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_t_data_outB_exp[1] = t_data_outB_expected_prev[1];
	end
	if (
		( t_data_outB_expected_prev[2] !== 1'bx ) && ( t_data_outB_prev[2] !== t_data_outB_expected_prev[2] )
		&& ((t_data_outB_expected_prev[2] !== last_t_data_outB_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_data_outB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_data_outB_expected_prev);
		$display ("     Real value = %b", t_data_outB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_t_data_outB_exp[2] = t_data_outB_expected_prev[2];
	end
	if (
		( t_data_outB_expected_prev[3] !== 1'bx ) && ( t_data_outB_prev[3] !== t_data_outB_expected_prev[3] )
		&& ((t_data_outB_expected_prev[3] !== last_t_data_outB_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_data_outB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_data_outB_expected_prev);
		$display ("     Real value = %b", t_data_outB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_t_data_outB_exp[3] = t_data_outB_expected_prev[3];
	end
	if (
		( t_opCode_expected_prev[0] !== 1'bx ) && ( t_opCode_prev[0] !== t_opCode_expected_prev[0] )
		&& ((t_opCode_expected_prev[0] !== last_t_opCode_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_opCode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_opCode_expected_prev);
		$display ("     Real value = %b", t_opCode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_t_opCode_exp[0] = t_opCode_expected_prev[0];
	end
	if (
		( t_opCode_expected_prev[1] !== 1'bx ) && ( t_opCode_prev[1] !== t_opCode_expected_prev[1] )
		&& ((t_opCode_expected_prev[1] !== last_t_opCode_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_opCode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_opCode_expected_prev);
		$display ("     Real value = %b", t_opCode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_t_opCode_exp[1] = t_opCode_expected_prev[1];
	end
	if (
		( t_opCode_expected_prev[2] !== 1'bx ) && ( t_opCode_prev[2] !== t_opCode_expected_prev[2] )
		&& ((t_opCode_expected_prev[2] !== last_t_opCode_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_opCode[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_opCode_expected_prev);
		$display ("     Real value = %b", t_opCode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_t_opCode_exp[2] = t_opCode_expected_prev[2];
	end
	if (
		( t_pc_expected_prev[0] !== 1'bx ) && ( t_pc_prev[0] !== t_pc_expected_prev[0] )
		&& ((t_pc_expected_prev[0] !== last_t_pc_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_pc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_pc_expected_prev);
		$display ("     Real value = %b", t_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_t_pc_exp[0] = t_pc_expected_prev[0];
	end
	if (
		( t_pc_expected_prev[1] !== 1'bx ) && ( t_pc_prev[1] !== t_pc_expected_prev[1] )
		&& ((t_pc_expected_prev[1] !== last_t_pc_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_pc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_pc_expected_prev);
		$display ("     Real value = %b", t_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_t_pc_exp[1] = t_pc_expected_prev[1];
	end
	if (
		( t_pc_expected_prev[2] !== 1'bx ) && ( t_pc_prev[2] !== t_pc_expected_prev[2] )
		&& ((t_pc_expected_prev[2] !== last_t_pc_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_pc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_pc_expected_prev);
		$display ("     Real value = %b", t_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_t_pc_exp[2] = t_pc_expected_prev[2];
	end
	if (
		( t_pc_expected_prev[3] !== 1'bx ) && ( t_pc_prev[3] !== t_pc_expected_prev[3] )
		&& ((t_pc_expected_prev[3] !== last_t_pc_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_pc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_pc_expected_prev);
		$display ("     Real value = %b", t_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_t_pc_exp[3] = t_pc_expected_prev[3];
	end
	if (
		( t_sig_pc_expected_prev !== 1'bx ) && ( t_sig_pc_prev !== t_sig_pc_expected_prev )
		&& ((t_sig_pc_expected_prev !== last_t_sig_pc_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_sig_pc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_sig_pc_expected_prev);
		$display ("     Real value = %b", t_sig_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_t_sig_pc_exp = t_sig_pc_expected_prev;
	end
	if (
		( test_out_ins_expected_prev[0] !== 1'bx ) && ( test_out_ins_prev[0] !== test_out_ins_expected_prev[0] )
		&& ((test_out_ins_expected_prev[0] !== last_test_out_ins_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test_out_ins[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_out_ins_expected_prev);
		$display ("     Real value = %b", test_out_ins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_test_out_ins_exp[0] = test_out_ins_expected_prev[0];
	end
	if (
		( test_out_ins_expected_prev[1] !== 1'bx ) && ( test_out_ins_prev[1] !== test_out_ins_expected_prev[1] )
		&& ((test_out_ins_expected_prev[1] !== last_test_out_ins_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test_out_ins[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_out_ins_expected_prev);
		$display ("     Real value = %b", test_out_ins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_test_out_ins_exp[1] = test_out_ins_expected_prev[1];
	end
	if (
		( test_out_ins_expected_prev[2] !== 1'bx ) && ( test_out_ins_prev[2] !== test_out_ins_expected_prev[2] )
		&& ((test_out_ins_expected_prev[2] !== last_test_out_ins_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test_out_ins[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_out_ins_expected_prev);
		$display ("     Real value = %b", test_out_ins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_test_out_ins_exp[2] = test_out_ins_expected_prev[2];
	end
	if (
		( test_out_ins_expected_prev[3] !== 1'bx ) && ( test_out_ins_prev[3] !== test_out_ins_expected_prev[3] )
		&& ((test_out_ins_expected_prev[3] !== last_test_out_ins_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test_out_ins[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_out_ins_expected_prev);
		$display ("     Real value = %b", test_out_ins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_test_out_ins_exp[3] = test_out_ins_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module IR_ins_selc1_alu_selc2_control_mem_pc_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst;
reg start_but;
// wires                                               
wire [3:0] data_out;
wire [3:0] t_data_outA;
wire [3:0] t_data_outB;
wire [2:0] t_opCode;
wire [3:0] t_pc;
wire t_sig_pc;
wire [3:0] test_out_ins;

wire sampler;                             

// assign statements (if any)                          
IR_ins_selc1_alu_selc2_control_mem_pc i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data_out(data_out),
	.rst(rst),
	.start_but(start_but),
	.t_data_outA(t_data_outA),
	.t_data_outB(t_data_outB),
	.t_opCode(t_opCode),
	.t_pc(t_pc),
	.t_sig_pc(t_sig_pc),
	.test_out_ins(test_out_ins)
);

// rst
initial
begin
	rst = 1'b1;
	rst = #480000 1'b0;
	rst = #400000 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// start_but
initial
begin
	start_but = 1'b0;
	start_but = #30000 1'b1;
	start_but = #10000 1'b0;
	start_but = #1360000 1'b1;
	start_but = #10000 1'b0;
end 

IR_ins_selc1_alu_selc2_control_mem_pc_vlg_sample_tst tb_sample (
	.clk(clk),
	.rst(rst),
	.start_but(start_but),
	.sampler_tx(sampler)
);

IR_ins_selc1_alu_selc2_control_mem_pc_vlg_check_tst tb_out(
	.data_out(data_out),
	.t_data_outA(t_data_outA),
	.t_data_outB(t_data_outB),
	.t_opCode(t_opCode),
	.t_pc(t_pc),
	.t_sig_pc(t_sig_pc),
	.test_out_ins(test_out_ins),
	.sampler_rx(sampler)
);
endmodule

